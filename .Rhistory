library('datasets')
data('iris')
data('mtcars')
sapply(split(mtcars$mpg,mtcars$cyl),mean)
source('programming2.r')
ls()
makeCacheMatrix(as.matrix(1:10))
makeCacheMatrix(matrix(c(1,2,3,11,12,13),nrow=2,ncol=3)
)
mdat = matrix(c(1,2,3,11,12,13),nrow=2,ncol=3))
mdat = matrix(c(1,2,3,11,12,13),nrow=2,ncol=3)
mdat
mdat.ncol
mdat$ncol
is.matrix(mdat)
dims = dim(mdat)
dims
makeCacheMatrix(mdat)
source('programming.r')
source('programming2.r')
makeCacheMatrix(mdat)
source('programming2.r')
msdat = matrix(c(1,2,3,11,12,13,45,22,3),nrow=3,ncol=3)
makeCacheMatrix(msdat)
mysqmat <-makeCacheMatrix(msdat)
mysqmat.get
mysqmat.get()
mysqmat$get()
mysqmat$getinv()
mysqmat$set(msdat)
mysqmat$getinv()
mysqmat$setinv(solve(msdat))
mysqmat$getinv()
mysqmat$get()
mysqmat$getinv()
mysqmat$setinv(solve(msdat,b=NULL))
mysqmat$getinv()
source('programming2.r')
msdat = matrix(c(1,2,3,11,12,13,45,22,3),nrow=3,ncol=3)
mysqmat <-makeCacheMatrix(msdat)
mysqmat$set(msdat)
mysqmat$setinv(msdat)
mysqmat$getinv()
class(mysqmat)
class(msdat)
mysqmat
class(msdat)
class(mysqmat)
source('programming2.r')
msdat = matrix(c(1,2,3,11,12,13,45,22,3),nrow=3,ncol=3)
mysqmat<-makeCacheMatrix()
mysqmat$set(msdat)
mysqmat$get()
mysqmat$setinv(msdat)
mysqmat$getinv()
invC <- cacheSolve(mysqmat)
invC
msdat = matrix(c(1,2,3,11,12,13,45,22,3,34,6,61,21,9,70),nrow=4,ncol=4)
msdat = matrix(c(1,2,3,11,12,13,45,22,3,34,6,61,21,9,70,4),nrow=4,ncol=4)
mysqmat$set(msdat)
invC <- cacheSolve(mysqmat)
invC
install.packages("KernSmooth")
library(KernSmooth)
exit
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages(p, quiet = TRUE)
library(swirl)
swirl()
install.packages(p, quiet = TRUE)
install.packages("RMySQL")
library(RMySQL)
version()
version
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
warnings()
affyMisSmall <- fetch(query,n=10); dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
created = h5createFile("example.h5")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
ls()
con = url("https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
htmlCode
ls()
close(con)
htmlCode
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
htmlCode
library(XML)
library(httr)
htmlCode <- readLines(con)
htmlCode
install.packages(httr)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(rawToChar(GET(url)$content), useInternalNodes = TRUE)
xpathSApply(html, "//title", xmlValue)
close(con)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
list
list()
ls()
for (obj in ls()) { message(obj); print(object.size(get(obj)), units='auto') }
library(httr); html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText = TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",authenticate("user","passwd"))
pg2
names(pg2)
ls()
rm htmlCode
remove("htmlCode")
ls()
url
remove(con)
remove(url)
connections
showConnections()
showConnections(all=FALSE)
quit
quit()
install.packages("devtools")
install_version("yaml", version="2.1.16")
install.packages("yaml")
install_version("yaml", version="2.1.16")
install.packages("devtools")
library(swirl)
swirl()
install_version("yaml", version="2.1.16")
install_from_swirl("C:/Users/Mike/Documents/R/win-library/3.4/swirl/Courses/Getting_and_Cleaning_Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf
)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
quit
exit
.
leave()
exit()
quit()
source("dev.R")
getwd()
setwd("tidydata")
getwd()
source("dev.R")
names(test1)
head(test1)
?read_csv
source("dev.R")
source("dev.R")
head(test1)
source("dev.R")
head(test1)
source("dev.R")
source("dev.R")
source("dev.R")
test1[1]
test1[1,1]
r1<-grep(pattern,test1[,1],value=TRUE)
pattern<- " (-)?[0-9].[0-9][0-9][0-9][0-9][0-9][0-9][0-9]e-[0-9][0-9][0-9]{561}"
r1<-grep(pattern,test1[,1],value=TRUE)
pattern<- " (-)?[0-9].[0-9][0-9][0-9][0-9][0-9][0-9][0-9]e-[0-9][0-9][0-9]{5}"
r1<-grep(pattern,test1[,1],value=TRUE)
r1
pattern<- " (-)?[1-9].[0-9][0-9][0-9][0-9][0-9][0-9][0-9]e-[0-9][0-9][0-9]{5}"
r1<-grep(pattern,test1[,1],value=TRUE)
r1
test1[,1]
r1<-grep(pattern,test1[1,1],value=TRUE)
r1
test1[1,1]
grep(".e-[0-9]+.",test1[1,1],value=TRUE)
pattern<- " (-)?[1-9].[0-9][0-9][0-9][0-9][0-9][0-9][0-9]e[+-][0-9][0-9][0-9]{5}"
grep(pattern,test1[1,1],value=TRUE)
grep(".e-[0-9]+.",test1[1,1],value=TRUE)
source("dev.R")
source("dev.R")
source("dev.R")
?read_fwf
?fwf_widths
source("dev.R")
source("dev.R")
source("dev.R")
source("dev.R")
source("dev.R")
source("dev.R")
source("dev.R")
class(testx)
testx$X1
c(rep(4,2))
c(rep(7,2))
source("dev.R")
source("dev.R")
print("test ", 14)
print("test ", str(14)
_
print("test ", str(14))
help("print")
print(" ha ")
source("dev.R")
head(testy)
